!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BFGS_H	src/bfgs.h	8;"	d
BFGS	src/bfgs.h	/^class BFGS : public Optimiseur$/;"	c
BFGS	src/bfgs.h	/^		BFGS(Vector x0, Simulateur *s, double epsilon) : Optimiseur(x0, s, epsilon) { };$/;"	f	class:BFGS
DOUBLE_INFINITY	src/types.h	7;"	d
FUNCS_H	src/funcs.h	4;"	d
Matrix	src/types.h	/^typedef Array<double,2> Matrix;$/;"	t
OPTIMISEUR_H	src/optimiseur.h	8;"	d
Optimiseur	src/optimiseur.h	/^class Optimiseur $/;"	c
Optimiseur	src/optimiseur.cpp	/^Optimiseur::Optimiseur(Vector x0, Simulateur *s, double epsilon) {$/;"	f	class:Optimiseur
Rosenbrock	src/main.cpp	/^class Rosenbrock : public virtual Simulateur$/;"	c	file:
SIMULATEUR_H	src/simulateur.h	11;"	d
Simulateur	src/simulateur.h	/^class Simulateur {$/;"	c
TYPES_H	src/types.h	3;"	d
Vector	src/types.h	/^typedef Array<double,2> Vector;$/;"	t
Wolfe	src/optimiseur.cpp	/^double Optimiseur::Wolfe(Vector &x0, Vector &d, double m1, double m2) {$/;"	f	class:Optimiseur
arrayInfo	src/funcs.cpp	/^void arrayInfo(const Matrix &a) {$/;"	f
computeMatrix	src/bfgs.h	/^		void computeMatrix(Matrix &W, Vector &s, Vector &y) {$/;"	f	class:BFGS
epsilon	src/optimiseur.h	/^		double epsilon;$/;"	m	class:Optimiseur
getGradient	src/main.cpp	/^		Vector getGradient(const Vector x) {$/;"	f	class:Rosenbrock
getLastPoint	src/optimiseur.cpp	/^Vector *Optimiseur::getLastPoint() {$/;"	f	class:Optimiseur
getPoints	src/optimiseur.cpp	/^std::list<Vector *> Optimiseur::getPoints() {$/;"	f	class:Optimiseur
getValue	src/main.cpp	/^		double getValue(const Vector x) {$/;"	f	class:Rosenbrock
main	src/main.cpp	/^int main () {$/;"	f
mult	src/funcs.cpp	/^Matrix mult(const Matrix &A, const Matrix &B) {$/;"	f
points	src/optimiseur.h	/^		std::list<Vector *> points;$/;"	m	class:Optimiseur
rand_init	src/random.c	/^void rand_init(void) {$/;"	f
random_boolean	src/random.c	/^bool random_boolean() {$/;"	f
random_char_int	src/random.c	/^char *random_char_int(int longueur)$/;"	f
random_char	src/random.c	/^char *random_char(int longueur)$/;"	f
random_double_uniform	src/random.c	/^double random_double_uniform() {$/;"	f
random_double	src/random.c	/^double random_double(double a, double b) {$/;"	f
random_float_uniform	src/random.c	/^float random_float_uniform() {$/;"	f
random_float	src/random.c	/^float random_float(float a, float b) {$/;"	f
random_int16	src/random.c	/^int16_t random_int16(int16_t a, int16_t b) {$/;"	f
random_int32	src/random.c	/^int32_t random_int32(int32_t a, int32_t b) {$/;"	f
random_int64	src/random.c	/^int64_t random_int64(int64_t a, int64_t b) {$/;"	f
random_int8	src/random.c	/^int8_t random_int8(int8_t a, int8_t b) {$/;"	f
random_int	src/random.c	/^int random_int(int a, int b) {$/;"	f
random_long	src/random.c	/^long random_long(long a, long b) {$/;"	f
random_uint16	src/random.c	/^uint16_t random_uint16(uint16_t a, uint16_t b) {$/;"	f
random_uint32	src/random.c	/^uint32_t random_uint32(uint32_t a, uint32_t b) {$/;"	f
random_uint64	src/random.c	/^uint64_t random_uint64(uint64_t a, uint64_t b) {$/;"	f
random_uint8	src/random.c	/^uint8_t random_uint8(uint8_t a, uint8_t b) {$/;"	f
random_uint	src/random.c	/^unsigned int random_uint(unsigned int a, unsigned int b) {$/;"	f
random_ulong	src/random.c	/^unsigned long random_ulong(unsigned long a, unsigned long b) {$/;"	f
run	src/bfgs.h	/^		void run() {$/;"	f	class:BFGS
scalarProduct	src/funcs.cpp	/^double scalarProduct(const Vector &v1, const Vector &v2) {$/;"	f
s	src/optimiseur.h	/^		Simulateur *s;$/;"	m	class:Optimiseur
transpose	src/funcs.cpp	/^Vector transpose(const Vector v) {$/;"	f
x0	src/optimiseur.h	/^		Vector x0;$/;"	m	class:Optimiseur
